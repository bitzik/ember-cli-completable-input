{"version":3,"sources":["dummy/app.js","dummy/components/completable-input.js","dummy/controllers/application.js","dummy/controllers/debug-demo.js","dummy/controllers/home.js","dummy/controllers/with-style.js","dummy/ember-cli-completable-input/tests/ember-cli-completable-input/components/completable-input.jshint.js","dummy/ember-cli-completable-input/tests/ember-cli-completable-input/index.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/routes/debug-demo.js","dummy/routes/home.js","dummy/routes/with-style.js","dummy/templates/application.js","dummy/templates/components/completable-input.js","dummy/templates/debug-demo.js","dummy/templates/home.js","dummy/templates/with-style.js","dummy/tests/app.jshint.js","dummy/tests/controllers/application.jshint.js","dummy/tests/controllers/debug-demo.jshint.js","dummy/tests/controllers/home.jshint.js","dummy/tests/controllers/with-style.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/debug-demo.jshint.js","dummy/tests/routes/home.jshint.js","dummy/tests/routes/with-style.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/completable-input', ['exports', 'ember', 'ember-cli-completable-input/components/completable-input'], function (exports, Ember, CompletableInputComponent) {\n\n\t'use strict';\n\n\texports['default'] = CompletableInputComponent['default'].extend({});\n\n});","define('dummy/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    isHome: (function () {\n      \"use strict\";\n      return this.get(\"currentRouteName\") === \"home\";\n    }).property(\"currentRouteName\"),\n    isDebugDemo: (function () {\n      \"use strict\";\n      return this.get(\"currentRouteName\") === \"debug-demo\";\n    }).property(\"currentRouteName\"),\n    isWithStyle: (function () {\n      \"use strict\";\n      return this.get(\"currentRouteName\") === \"with-style\";\n    }).property(\"currentRouteName\")\n  });\n\n});","define('dummy/controllers/debug-demo', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    //Completable input config\n    potentialComplements: [],\n    completableValue: null,\n    minForComplement: 3,\n    complements: \"Afghanistan,    Albania,    Algeria,    Andorra,    Angola,    Antigua & Deps,    Argentina,    Armenia,    Australia,    Austria,    Azerbaijan,    Bahamas,    Bahrain,    Bangladesh,    Barbados,    Belarus,    Belgium,    Belize,    Benin,    Bhutan,    Bolivia,    Bosnia Herzegovina,    Botswana,    Brazil,    Brunei,    Bulgaria,    Burkina,    Burundi,    Cambodia,    Cameroon,    Canada,    Cape Verde,    Central African Rep,    Chad,    Chile,    China,    Colombia,    Comoros,    Congo,    Congo {Democratic Rep},    Costa Rica,    Croatia,    Cuba,    Cyprus,    Czech Republic,    Denmark,    Djibouti,    Dominica,    Dominican Republic,    East Timor,    Ecuador,    Egypt,    El Salvador,    Equatorial Guinea,    Eritrea,    Estonia,    Ethiopia,    Fiji,    Finland,    France,    Gabon,    Gambia,    Georgia,    Germany,    Ghana,    Greece,    Grenada,    Guatemala,    Guinea,    Guinea-Bissau,    Guyana,    Haiti,    Honduras,    Hungary,    Iceland,    India,    Indonesia,    Iran,    Iraq,    Ireland {Republic},    Israel,    Italy,    Ivory Coast,    Jamaica,    Japan,    Jordan,    Kazakhstan,    Kenya,    Kiribati,    Korea North,    Korea South,    Kosovo,    Kuwait,    Kyrgyzstan,    Laos,    Latvia,    Lebanon,    Lesotho,    Liberia,    Libya,    Liechtenstein,    Lithuania,    Luxembourg,    Macedonia,    Madagascar,    Malawi,    Malaysia,    Maldives,    Mali,    Malta,    Marshall Islands,    Mauritania,    Mauritius,    Mexico,    Micronesia,    Moldova,    Monaco,    Mongolia,    Montenegro,    Morocco,    Mozambique,    Myanmar (Burma),    Namibia,    Nauru,    Nepal,    Netherlands,    New Zealand,    Nicaragua,    Niger,    Nigeria,    Norway,    Oman,    Pakistan,    Palau,    Panama,    Papua New Guinea,    Paraguay,    Peru,    Philippines,    Poland,    Portugal,    Qatar,    Romania,    Russian Federation,    Rwanda,    St Kitts & Nevis,    St Lucia,    Saint Vincent & the Grenadines,    Samoa,    San Marino,    Sao Tome & Principe,    Saudi Arabia,    Senegal,    Serbia,    Seychelles,    Sierra Leone,    Singapore,    Slovakia,    Slovenia,    Solomon Islands,    Somalia,    South Africa,    South Sudan,    Spain,    Sri Lanka,    Sudan,    Suriname,    Swaziland,    Sweden,    Switzerland,    Syria,    Taiwan,    Tajikistan,    Tanzania,    Thailand,    Togo,    Tonga,    Trinidad & Tobago,    Tunisia,    Turkey,    Turkmenistan,    Tuvalu,    Uganda,    Ukraine,    United Arab Emirates,    United Kingdom,    United States,    Uruguay,    Uzbekistan,    Vanuatu,    Vatican City,    Venezuela,    Vietnam,    Yemen,    Zambia,    Zimbabwe\".split(\",\").map(function (country) {\n      \"use strict\";\n      return country.trim();\n    }),\n    possibleComplements: (function (key, value) {\n      \"use strict\";\n      var complements;\n      //setter\n      if (arguments.length > 1) {\n        complements = value.replace(\",\", \"\\n\").split(\"\\n\");\n        this.set(\"complements\", complements);\n      }\n\n      complements = this.get(\"complements\");\n      return complements.join(\"\\n\");\n    }).property(\"complements\"),\n    //currentCompletion: null,\n    currentCompletionObserver: (function () {\n      \"use strict\";\n      Ember['default'].Logger.info(\"currentCompletion -> \", this.get(\"currentCompletion\"));\n    }).observes(\"currentCompletion\").on(\"init\"),\n    actions: {\n      completableEnterPressed: function () {\n        \"use strict\";\n        Ember['default'].Logger.debug(\"Enter was pressed on the completable input!\");\n        Ember['default'].Logger.debug(\"the current Completion is -> \", this.get(\"currentCompletion\"));\n        Ember['default'].Logger.debug(\"the completableValue is -> \", this.get(\"completableValue\"));\n      }\n    }\n  });\n\n});","define('dummy/controllers/home', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /*global markdown*/\n  exports['default'] = Ember['default'].Controller.extend({\n    mdText: (function () {\n      \"use strict\";\n      return markdown.toHTML(this.get(\"model\"));\n    }).property(\"model\"),\n\n    //Completable input config\n    complements: \"Afghanistan,    Albania,    Algeria,    Andorra,    Angola,    Antigua & Deps,    Argentina,    Armenia,    Australia,    Austria,    Azerbaijan,    Bahamas,    Bahrain,    Bangladesh,    Barbados,    Belarus,    Belgium,    Belize,    Benin,    Bhutan,    Bolivia,    Bosnia Herzegovina,    Botswana,    Brazil,    Brunei,    Bulgaria,    Burkina,    Burundi,    Cambodia,    Cameroon,    Canada,    Cape Verde,    Central African Rep,    Chad,    Chile,    China,    Colombia,    Comoros,    Congo,    Congo {Democratic Rep},    Costa Rica,    Croatia,    Cuba,    Cyprus,    Czech Republic,    Denmark,    Djibouti,    Dominica,    Dominican Republic,    East Timor,    Ecuador,    Egypt,    El Salvador,    Equatorial Guinea,    Eritrea,    Estonia,    Ethiopia,    Fiji,    Finland,    France,    Gabon,    Gambia,    Georgia,    Germany,    Ghana,    Greece,    Grenada,    Guatemala,    Guinea,    Guinea-Bissau,    Guyana,    Haiti,    Honduras,    Hungary,    Iceland,    India,    Indonesia,    Iran,    Iraq,    Ireland {Republic},    Israel,    Italy,    Ivory Coast,    Jamaica,    Japan,    Jordan,    Kazakhstan,    Kenya,    Kiribati,    Korea North,    Korea South,    Kosovo,    Kuwait,    Kyrgyzstan,    Laos,    Latvia,    Lebanon,    Lesotho,    Liberia,    Libya,    Liechtenstein,    Lithuania,    Luxembourg,    Macedonia,    Madagascar,    Malawi,    Malaysia,    Maldives,    Mali,    Malta,    Marshall Islands,    Mauritania,    Mauritius,    Mexico,    Micronesia,    Moldova,    Monaco,    Mongolia,    Montenegro,    Morocco,    Mozambique,    Myanmar (Burma),    Namibia,    Nauru,    Nepal,    Netherlands,    New Zealand,    Nicaragua,    Niger,    Nigeria,    Norway,    Oman,    Pakistan,    Palau,    Panama,    Papua New Guinea,    Paraguay,    Peru,    Philippines,    Poland,    Portugal,    Qatar,    Romania,    Russian Federation,    Rwanda,    St Kitts & Nevis,    St Lucia,    Saint Vincent & the Grenadines,    Samoa,    San Marino,    Sao Tome & Principe,    Saudi Arabia,    Senegal,    Serbia,    Seychelles,    Sierra Leone,    Singapore,    Slovakia,    Slovenia,    Solomon Islands,    Somalia,    South Africa,    South Sudan,    Spain,    Sri Lanka,    Sudan,    Suriname,    Swaziland,    Sweden,    Switzerland,    Syria,    Taiwan,    Tajikistan,    Tanzania,    Thailand,    Togo,    Tonga,    Trinidad & Tobago,    Tunisia,    Turkey,    Turkmenistan,    Tuvalu,    Uganda,    Ukraine,    United Arab Emirates,    United Kingdom,    United States,    Uruguay,    Uzbekistan,    Vanuatu,    Vatican City,    Venezuela,    Vietnam,    Yemen,    Zambia,    Zimbabwe\".split(\",\").map(function (country) {\n      \"use strict\";\n      return country.trim();\n    }),\n    actions: {\n      completableEnterPressed: function () {\n        \"use strict\";\n        Ember['default'].Logger.debug(\"Enter was pressed on the completable input!\");\n        Ember['default'].Logger.debug(\"the current Completion is -> \", this.get(\"currentCompletion\"));\n        Ember['default'].Logger.debug(\"the completableValue is -> \", this.get(\"completableValue\"));\n      }\n    }\n  });\n\n});","define('dummy/controllers/with-style', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /*global markdown*/\n  exports['default'] = Ember['default'].Controller.extend({\n    mdText: (function () {\n      \"use strict\";\n      return markdown.toHTML(this.get(\"model\"));\n    }).property(\"model\"),\n\n    //Completable input config\n    complements: \"EmberAddons, EmberJS, Ember-cli, Discourse\".split(\",\").map(function (stuff) {\n      \"use strict\";\n      return stuff.trim();\n    }),\n    actions: {\n      completableEnterPressed: function () {\n        \"use strict\";\n        Ember['default'].Logger.debug(\"Enter was pressed on the completable input!\");\n        Ember['default'].Logger.debug(\"the current Completion is -> \", this.get(\"currentCompletion\"));\n        Ember['default'].Logger.debug(\"the completableValue is -> \", this.get(\"completableValue\"));\n      }\n    }\n  });\n\n});","define('dummy/ember-cli-completable-input/tests/ember-cli-completable-input/components/completable-input.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - ember-cli-completable-input/components\");\n  test(\"ember-cli-completable-input/components/completable-input.js should pass jshint\", function () {\n    ok(true, \"ember-cli-completable-input/components/completable-input.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-cli-completable-input/tests/ember-cli-completable-input/index.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - ember-cli-completable-input\");\n  test(\"ember-cli-completable-input/index.js should pass jshint\", function () {\n    ok(true, \"ember-cli-completable-input/index.js should pass jshint.\");\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function (container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    \"use strict\";\n    this.route(\"home\", { path: \"/\" });\n    this.route(\"with-style\");\n    this.route(\"debug-demo\");\n  });\n\n  exports['default'] = Router;\n\n});","define('dummy/routes/debug-demo', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('dummy/routes/home', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      \"use strict\";\n      return Ember['default'].$.ajax(\"./ember-cli-completable-input/README.md\");\n    }\n  });\n\n});","define('dummy/routes/with-style', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      \"use strict\";\n      return Ember['default'].$.ajax(\"./ember-cli-completable-input/with-style.md\");\n    }\n  });\n\n});","define('dummy/templates/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n  /**/) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n  function program1(depth0,data) {\n    \n    \n    data.buffer.push(\"Home\");\n    }\n\n  function program3(depth0,data) {\n    \n    \n    data.buffer.push(\"Debug / demo\");\n    }\n\n  function program5(depth0,data) {\n    \n    \n    data.buffer.push(\"With style\");\n    }\n\n    data.buffer.push(\"<nav class=\\\"navbar navbar-default\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"navbar-header\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#bs-example-navbar-collapse-1\\\">\\r\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\r\\n        <span class=\\\"icon-bar\\\"></span>\\r\\n        <span class=\\\"icon-bar\\\"></span>\\r\\n        <span class=\\\"icon-bar\\\"></span>\\r\\n      </button>\\r\\n      <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Completable-input</a>\\r\\n    </div>\\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\r\\n      <ul class=\\\"nav navbar-nav\\\">\\r\\n        <li \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\"isHome:active\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\">\\r\\n          \");\n    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"home\", options) : helperMissing.call(depth0, \"link-to\", \"home\", options));\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n        </li>\\r\\n        <li \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\"isDebugDemo:active\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\">\\r\\n          \");\n    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"debug-demo\", options) : helperMissing.call(depth0, \"link-to\", \"debug-demo\", options));\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n        </li>\\r\\n        <li \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\"isWithStyle:active\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\">\\r\\n          \");\n    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"with-style\", options) : helperMissing.call(depth0, \"link-to\", \"with-style\", options));\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div><!-- /.container-fluid -->\\r\\n</nav>\\r\\n<div class=\\\"container\\\">\\r\\n  \");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n</div>\\r\\n\");\n    return buffer;\n    \n  });\n\n});","define('dummy/templates/components/completable-input', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n  /**/) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n  function program1(depth0,data) {\n    \n    var buffer = '', stack1;\n    data.buffer.push(\"\\r\\n      <div \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\":completion-candidate candidate.isActive:active\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\"\\r\\n        \");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectComplement\", \"candidate\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n    data.buffer.push(\">\\r\\n        \");\n    stack1 = helpers._triageMustache.call(depth0, \"candidate.value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n      </div>\\r\\n    \");\n    return buffer;\n    }\n\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'type': (\"text\"),\n      'class': (\"inputClassNames\"),\n      'value': (\"value\"),\n      'placeholder': (\"placeholder\"),\n      'enter': (\"enterPressed\")\n    },hashTypes:{'type': \"STRING\",'class': \"ID\",'value': \"ID\",'placeholder': \"ID\",'enter': \"STRING\"},hashContexts:{'type': depth0,'class': depth0,'value': depth0,'placeholder': depth0,'enter': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"\\r\\n\\r\\n\\r\\n\\r\\n  <div \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\":completion-list showCompletions:show:hide\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\">\\r\\n  <!--<div class=\\\"completion-list\\\">-->\\r\\n    \");\n    stack1 = helpers.each.call(depth0, \"candidate\", \"in\", \"potentialComplements\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n  </div>\\r\\n\\r\\n\");\n    return buffer;\n    \n  });\n\n});","define('dummy/templates/debug-demo', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n  /**/) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(\"<h1> welcome to the demo/test page! </h1>\\n\\n\\n<fieldset>\\n  <legend>The actual component</legend>\\n  <p class=\\\"text-center\\\">\\n    Enter something:\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers['completable-input'] || (depth0 && depth0['completable-input']),options={hash:{\n      'value': (\"completableValue\"),\n      'placeholder': (\"start typing and completion will appear\"),\n      'complements': (\"complements\"),\n      'selectedCompletion': (\"currentCompletion\"),\n      'enter': (\"completableEnterPressed\"),\n      'minForComplement': (\"minForComplement\"),\n      'potentialComplements': (\"potentialComplements\"),\n      'inFocus': (\"inFocus\"),\n      'activeComplement': (\"activeComplement\")\n    },hashTypes:{'value': \"ID\",'placeholder': \"STRING\",'complements': \"ID\",'selectedCompletion': \"ID\",'enter': \"STRING\",'minForComplement': \"ID\",'potentialComplements': \"ID\",'inFocus': \"ID\",'activeComplement': \"ID\"},hashContexts:{'value': depth0,'placeholder': depth0,'complements': depth0,'selectedCompletion': depth0,'enter': depth0,'minForComplement': depth0,'potentialComplements': depth0,'inFocus': depth0,'activeComplement': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"completable-input\", options))));\n    data.buffer.push(\"\\n  </p>\\n</fieldset>\\n\\n\\n<form>\\n  <fieldset>\\n    <legend>parameters</legend>\\n    <label for=\\\"minForComplement\\\">Minimal number of character before showing up completions?</label><br/>\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'type': (\"number\"),\n      'min': (0),\n      'value': (\"minForComplement\"),\n      'id': (\"minForComplement\")\n    },hashTypes:{'type': \"STRING\",'min': \"INTEGER\",'value': \"ID\",'id': \"STRING\"},hashContexts:{'type': depth0,'min': depth0,'value': depth0,'id': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"<br/>\\n    <label for=\\\"possibleComplements\\\">Place complements here, separate by a comma or a new line (pre-filled by the list of countries from <a href=\\\"http://openconcept.ca/blog/mgifford/text-list-all-countries-world\\\">here</a>)</label><br/>\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n      'value': (\"possibleComplements\"),\n      'rows': (8),\n      'id': (\"possibleComplements\")\n    },hashTypes:{'value': \"ID\",'rows': \"INTEGER\",'id': \"STRING\"},hashContexts:{'value': depth0,'rows': depth0,'id': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n    data.buffer.push(\"<br/>\\n  </fieldset>\\n</form>\\n\\n<div>\\n  <fieldset>\\n    <legend>debug zone</legend>\\n\\n    <p>\\n      showCompletions? \");\n    stack1 = helpers._triageMustache.call(depth0, \"showCompletions\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\" <br/>\\n      potentialComplements.length?  \");\n    stack1 = helpers._triageMustache.call(depth0, \"potentialComplements.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\" <br/>\\n      inFocus? \");\n    stack1 = helpers._triageMustache.call(depth0, \"inFocus\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"<br/>\\n      activeComplement? \");\n    stack1 = helpers._triageMustache.call(depth0, \"activeComplement.value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n    </p>\\n  </fieldset>\\n</div>\\n\\n\\n\\n\");\n    return buffer;\n    \n  });\n\n});","define('dummy/templates/home', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n  /**/) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n    data.buffer.push(\"<div>\\r\\n  \");\n    data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"mdText\", {hash:{\n      'unescaped': (\"true\")\n    },hashTypes:{'unescaped': \"STRING\"},hashContexts:{'unescaped': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n    data.buffer.push(\"\\r\\n</div>\\r\\n\\r\\n<p class=\\\"center\\\">\\r\\n  Pick your country:\\r\\n  \");\n    data.buffer.push(escapeExpression((helper = helpers['completable-input'] || (depth0 && depth0['completable-input']),options={hash:{\n      'value': (\"completableValue\"),\n      'placeholder': (\"start typing and completion will appear\"),\n      'complements': (\"complements\"),\n      'enter': (\"completableEnterPressed\"),\n      'minForComplement': (3),\n      'selectedCompletion': (\"selectedCompletion\")\n    },hashTypes:{'value': \"ID\",'placeholder': \"STRING\",'complements': \"ID\",'enter': \"STRING\",'minForComplement': \"INTEGER\",'selectedCompletion': \"ID\"},hashContexts:{'value': depth0,'placeholder': depth0,'complements': depth0,'enter': depth0,'minForComplement': depth0,'selectedCompletion': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"completable-input\", options))));\n    data.buffer.push(\"\\r\\n  <br/>\\r\\n  Value: \");\n    stack1 = helpers._triageMustache.call(depth0, \"completableValue\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\" <br/>\\r\\n  Selected completion: \");\n    stack1 = helpers._triageMustache.call(depth0, \"selectedCompletion\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\r\\n</p>\\r\\n\\r\\n\");\n    return buffer;\n    \n  });\n\n});","define('dummy/templates/with-style', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n  /**/) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(\"\\r\\n<p class=\\\"custom text-center\\\">\\r\\n  Select something cool:\\r\\n  \");\n    data.buffer.push(escapeExpression((helper = helpers['completable-input'] || (depth0 && depth0['completable-input']),options={hash:{\n      'placeholder': (\"start typing and completion will appear\"),\n      'complements': (\"complements\"),\n      'enter': (\"completableEnterPressed\"),\n      'minForComplement': (0)\n    },hashTypes:{'placeholder': \"STRING\",'complements': \"ID\",'enter': \"STRING\",'minForComplement': \"INTEGER\"},hashContexts:{'placeholder': depth0,'complements': depth0,'enter': depth0,'minForComplement': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"completable-input\", options))));\n    data.buffer.push(\"\\r\\n</p>\\r\\n\\r\\n<!--<div class=\\\"jumbotron\\\">-->\\r\\n  \");\n    data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"mdText\", {hash:{\n      'unescaped': (\"true\")\n    },hashTypes:{'unescaped': \"STRING\"},hashContexts:{'unescaped': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n    data.buffer.push(\"\\r\\n<!--</div>-->\\r\\n\\r\\n\\r\\n\\r\\n\");\n    return buffer;\n    \n  });\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/debug-demo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/debug-demo.js should pass jshint', function() { \n    ok(true, 'controllers/debug-demo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/home.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/home.js should pass jshint', function() { \n    ok(true, 'controllers/home.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/with-style.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/with-style.js should pass jshint', function() { \n    ok(true, 'controllers/with-style.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/debug-demo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/debug-demo.js should pass jshint', function() { \n    ok(true, 'routes/debug-demo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/home.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/home.js should pass jshint', function() { \n    ok(true, 'routes/home.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/with-style.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/with-style.js should pass jshint', function() { \n    ok(true, 'routes/with-style.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-cli-completable-input\",\"version\":\"0.1.1.af4f4388\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}